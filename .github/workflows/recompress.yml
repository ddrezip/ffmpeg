name: Recompress FFmpeg Builds

on:
  push:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_release.outputs.tag }}
      already_exists: ${{ steps.check_release.outputs.already_exists }}
      linux_url: ${{ steps.get_release.outputs.linux_url }}
      win_url: ${{ steps.get_release.outputs.win_url }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Install required software
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full jq curl unzip xz-utils tar upx-ucl

      - name: Get latest FFmpeg release info
        id: get_release
        run: |
          release=$(curl -s https://api.github.com/repos/BtbN/FFmpeg-Builds/releases | jq '.[0]')

          # Original tag is "latest", but we reconstruct the autobuild tag
          # published=$(echo "$release" | jq -r .published_at)
          # tag=$(date -u -d "$published" "+autobuild-%Y-%m-%d-%H-%M")
          
          raw_title=$(echo "$release" | jq -r .name)
          # Extract the date and time from parentheses in the name
          datetime=$(echo "$raw_title" | grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]+[0-9]{2}:[0-9]{2}' | head -n1)
          # Rebuild tag based on that date/time
          tag=$(date -u -d "$datetime" "+autobuild-%Y-%m-%d-%H-%M")
          # Clean up the title:
          title=$(echo "$raw_title" | sed -E 's/Latest[[:space:]]*//; s/[()]//g; s/[[:space:]]+$//')

          linux_url=$(echo "$release" | jq -r '.assets[] | select(.name == "ffmpeg-master-latest-linux64-gpl.tar.xz") | .browser_download_url')
          win_url=$(echo "$release" | jq -r '.assets[] | select(.name == "ffmpeg-master-latest-win64-gpl.zip") | .browser_download_url')

          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "linux_url=$linux_url" >> $GITHUB_OUTPUT
          echo "win_url=$win_url" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          existing=$(curl -s \
            -H "Authorization: token ${{ vars.PAT_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.tag }})
          if echo "$existing" | grep -q '"id":'; then
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Download, recompress builds
        if: steps.check_release.outputs.already_exists == 'false'
        run: |
          tag="${{ steps.get_release.outputs.tag }}"

          # Linux build
          curl -L -o ffmpeg-linux.tar.xz "${{ steps.get_release.outputs.linux_url }}"
          mkdir ffmpeg-linux
          tar -xJf ffmpeg-linux.tar.xz -C ffmpeg-linux
          # 7z a -t7z -mx=9 "ffmpeg-master-${tag}-linux64-gpl.7z" ./ffmpeg-linux/*

          # Linux binary only
          cp "ffmpeg-linux/ffmpeg-master-latest-linux64-gpl/bin/ffmpeg" "ffmpeg-master-${tag}-linux64-gpl-binary"
          # upx --ultra-brute -o "ffmpeg-master-${tag}-linux64-gpl-upx" "ffmpeg-master-${tag}-linux64-gpl-binary"

          # Windows build
          curl -L -o ffmpeg-win.zip "${{ steps.get_release.outputs.win_url }}"
          unzip ffmpeg-win.zip -d ffmpeg-win
          # 7z a -t7z -mx=9 "ffmpeg-master-${tag}-win64-gpl.7z" ./ffmpeg-win/*

          # Windows binary only
          cp "ffmpeg-win/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe" "ffmpeg-master-${tag}-win64-gpl-binary.exe"
          # upx --ultra-brute -o "ffmpeg-master-${tag}-win64-gpl-upx.exe" "ffmpeg-master-${tag}-win64-gpl-binary.exe"

      - name: Create new release
        if: steps.check_release.outputs.already_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_release.outputs.tag }}
          name: "${{ steps.get_release.outputs.title }} recompressed"
          body: |
            Recompressed from the original release at:
            https://github.com/BtbN/FFmpeg-Builds/releases/tag/${{ steps.get_release.outputs.tag }}
            (or here for the latest: https://github.com/BtbN/FFmpeg-Builds/releases/tag/latest)

            Extracted binaries are posted first, UPX-compressed ffmpeg binaries and fully recompressed folders should appear ~1h later.
          draft: false
          prerelease: false
          files: |
            ffmpeg-master-${{ steps.get_release.outputs.tag }}-linux64-gpl-binary
            ffmpeg-master-${{ steps.get_release.outputs.tag }}-win64-gpl-binary.exe
        env:
          GITHUB_TOKEN: ${{ vars.PAT_TOKEN }}

  compress_linux:
    runs-on: ubuntu-latest
    needs: create_release
    if: needs.create_release.outputs.already_exists == 'false'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Install required software
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full jq curl unzip xz-utils tar upx-ucl

      - name: Download, recompress builds
        run: |
          tag="${{ needs.create_release.outputs.tag }}"

          # Linux build
          curl -L -o ffmpeg-linux.tar.xz "${{ needs.create_release.outputs.linux_url }}"
          mkdir ffmpeg-linux
          tar -xJf ffmpeg-linux.tar.xz -C ffmpeg-linux
          7z a -t7z -mx=9 "ffmpeg-master-${tag}-linux64-gpl.7z" ./ffmpeg-linux/*

          # Linux binary only
          cp "ffmpeg-linux/ffmpeg-master-latest-linux64-gpl/bin/ffmpeg" "ffmpeg-master-${tag}-linux64-gpl-binary"
          upx --ultra-brute -o "ffmpeg-master-${tag}-linux64-gpl-upx" "ffmpeg-master-${tag}-linux64-gpl-binary"

      - name: Create new release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: |
            ffmpeg-master-${{ needs.create_release.outputs.tag }}-linux64-gpl.7z
            ffmpeg-master-${{ needs.create_release.outputs.tag }}-linux64-gpl-upx
        env:
          GITHUB_TOKEN: ${{ vars.PAT_TOKEN }}

  compress_windows:
    runs-on: ubuntu-latest
    needs: create_release
    if: needs.create_release.outputs.already_exists == 'false'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Install required software
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full jq curl unzip xz-utils tar upx-ucl

      - name: Download, recompress builds
        run: |
          tag="${{ needs.create_release.outputs.tag }}"

          # Windows build
          curl -L -o ffmpeg-win.zip "${{ needs.create_release.outputs.win_url }}"
          unzip ffmpeg-win.zip -d ffmpeg-win
          7z a -t7z -mx=9 "ffmpeg-master-${tag}-win64-gpl.7z" ./ffmpeg-win/*

          # Windows binary only
          cp "ffmpeg-win/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe" "ffmpeg-master-${tag}-win64-gpl-binary.exe"
          upx --ultra-brute -o "ffmpeg-master-${tag}-win64-gpl-upx.exe" "ffmpeg-master-${tag}-win64-gpl-binary.exe"

      - name: Create new release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create_release.outputs.tag }}
          files: |
            ffmpeg-master-${{ needs.create_release.outputs.tag }}-win64-gpl.7z
            ffmpeg-master-${{ needs.create_release.outputs.tag }}-win64-gpl-upx.exe
        env:
          GITHUB_TOKEN: ${{ vars.PAT_TOKEN }}
